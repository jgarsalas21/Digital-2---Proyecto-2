/****************************************************            LIBRERÍAS        *********************************************************************************/

#include <Arduino.h>
#include <ESP32SPISlave.h>
#include "Wire.h"

/****************************************************            VARIABLES        *********************************************************************************/
//SPI
int cmd_LED;        //Array para enviar valores de que LED encender a través de SPI
int cmd_TIMEs;      //Array para enviar valores de tiempo de encendido de la LED a través de SPI

ESP32SPISlave slave; 

static constexpr uint32_t BUFFER_SIZE {32};                  //Tamaño de los datos

uint8_t spi_slave_tx_buffer_LED [BUFFER_SIZE];               //Para LEDs
uint8_t spi_slave_rx_buffer_LED [BUFFER_SIZE];

uint8_t spi_slave_tx_buffer_TIMEs [BUFFER_SIZE];             //Para tiempo
uint8_t spi_slave_rx_buffer_TIMEs [BUFFER_SIZE];

//I2C
int mv = 0;
int mVp = 0;

/****************************************************              PINES          *********************************************************************************/

#define LED1 13  //LED roja
#define LED2 12  //LED naranja
#define LED3 14  //LED verde

#define Pot 34   //Lectura del potenciometro

#define I2C_DEV_ADDR 0x55

/***************************************************       DECLARACION DE FUNCIONES     *********************************************************************************/

void onRequest(void);
void onReceive(int len);

/***************************************************              SETUP           *********************************************************************************/

void setup() {

  Serial.begin(115200);
  delay(2000);
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);

  pinMode(Pot, INPUT);
  
//SPI
  slave.setDataMode(SPI_MODE0);
  slave.setQueueSize(1);
  slave.begin(VSPI);                                                               //Chip select: 5, CLK: 18, MOSI: 23, MISO: 19

  memset(spi_slave_tx_buffer_LED, 0, BUFFER_SIZE);
  memset(spi_slave_rx_buffer_LED, 0, BUFFER_SIZE);
  memset(spi_slave_tx_buffer_TIMEs, 0, BUFFER_SIZE);
  memset(spi_slave_rx_buffer_TIMEs, 0, BUFFER_SIZE);

//I2C
  Wire.onReceive(onReceive);
  Wire.onRequest(onRequest);
  Wire.begin((uint8_t)I2C_DEV_ADDR);

}

/***************************************************              LOOP              *******************************************************************************/

void loop() {
  slave.wait(spi_slave_rx_buffer_LED, NULL, BUFFER_SIZE);               // Espera hasta recibir órdenes del maestro
    cmd_LED = ((int)spi_slave_rx_buffer_LED[0]-48);                                  //Para iniciar el while


  while (slave.available() && cmd_LED != 0) {
    Serial.print("LED: ");
    Serial.println(spi_slave_rx_buffer_LED[0]);
    
    // Lee los valores recibidos
    Serial.println(cmd_LED);
    //creo timeon para tener un char unicamente del tiempo
    char timeon [4] = {spi_slave_rx_buffer_LED[2], spi_slave_rx_buffer_LED[3], spi_slave_rx_buffer_LED[4], spi_slave_rx_buffer_LED[5]};
    char timeonStr[5] = {timeon[0], timeon[1], timeon[2], timeon[3], '\0'};
    cmd_TIMEs = atoi(timeonStr); // transformo el tiempo a un entero
    Serial.println(cmd_TIMEs);
    slave.pop();

    // Verificación y ajuste del valor de tiempo para evitar valores inadecuados
    int delayTime = cmd_TIMEs;  // Multiplica para que cmd_TIMEs represente decenas de milisegundos (ajusta según sea necesario)

    Serial.print("TX buffer LED: ");
    Serial.println(spi_slave_tx_buffer_LED[0]);
    Serial.print("RX buffer LED: ");
    Serial.println(spi_slave_rx_buffer_LED[0]);
    Serial.print("TX buffer TIME: ");
    Serial.println(spi_slave_tx_buffer_TIMEs[0]);
    Serial.print("RX buffer TIME: ");
    Serial.println(spi_slave_rx_buffer_TIMEs[0]);

    if (cmd_LED == 1) {
      digitalWrite(LED1, HIGH);
      Serial.print("delaytime: ");
      Serial.println(delayTime);
      Serial.print("timeonStr: ");
      Serial.print(timeonStr[0]);
      Serial.print(timeonStr[1]);
      Serial.print(timeonStr[2]);
      Serial.println(timeonStr[3]);
      Serial.print("cmdtimes: ");
      Serial.println(cmd_TIMEs);
      delay(cmd_TIMEs);
      digitalWrite(LED1, LOW);

      cmd_LED = 0; // Reseteo las variables
      cmd_TIMEs = 0;

      Serial.println("LED 1 encendida");
      Serial.println("  ");
    }

    if (cmd_LED == 2) {
      digitalWrite(LED2, HIGH);
      Serial.print("delaytime: ");
      Serial.println(delayTime);
      Serial.print("timeonStr: ");
      Serial.print(timeonStr[0]);
      Serial.print(timeonStr[1]);
      Serial.print(timeonStr[2]);
      Serial.println(timeonStr[3]);
      Serial.print("cmdtimes: ");
      Serial.println(cmd_TIMEs);
      delay(cmd_TIMEs);
      digitalWrite(LED2, LOW);

      cmd_LED = 0; // Reseteo las variables
      cmd_TIMEs = 0;

      Serial.println("LED 2 encendida");
      Serial.println("  ");
    }

    if (cmd_LED == 3) {
      digitalWrite(LED3, HIGH);
      Serial.print("delaytime: ");
      Serial.println(delayTime);
      Serial.print("timeonStr: ");
      Serial.print(timeonStr[0]);
      Serial.print(timeonStr[1]);
      Serial.print(timeonStr[2]);
      Serial.println(timeonStr[3]);
      Serial.print("cmdtimes: ");
      Serial.println(cmd_TIMEs);
      delay(cmd_TIMEs);
      digitalWrite(LED3, LOW);

      cmd_LED = 0; // Reseteo las variables
      cmd_TIMEs = 0;

      Serial.println("LED 3 encendida");
      Serial.println("  ");
    } 
    /*
    else {
      Serial.println("Esta LED no existe");

      digitalWrite(LED1, HIGH);
      digitalWrite(LED2, HIGH);
      digitalWrite(LED3, HIGH);
      delay(2000);

      digitalWrite(LED1, LOW);
      digitalWrite(LED2, LOW);
      digitalWrite(LED3, LOW);

      cmd_LED = 0; // Reseteo las variables
      cmd_TIMEs = 0;
    }
    */
   cmd_LED = ((int)spi_slave_rx_buffer_LED[0]-48);
  }
}

/***************************************************              FUNCIONES             *******************************************************************************/

void onRequest(){
  Wire.print(mVp);
  Serial.println("onRequest");
  Serial.print("mVp: ");
  Serial.println(mVp);
  Serial.println("");
}

void onReceive(int len){
  //    Serial.printf("onReceive[%d]: " len);
  //Serial.println("45");
  while(Wire.available()){

    uint8_t incomingByte = Wire.read();
    Serial.println(incomingByte);
    Serial.println("Fuck");

    if (incomingByte == 'S')
    {
      mv = analogRead(Pot);
      mVp = map(mv, 0, 4095, 0, 255);
      Serial.print("mv: ");
      Serial.println(mv);
      Wire.print(mv);
    }
  } 
}
